1. Analise o código e tente identificar eventuais erros

    O código compila e executa corretamente. Porntanto, não há erros aparentes.

2. Utilizando as ferramentas, confirme a sua avaliação ou identifique problemas.

    Relatório do Valgrind:

    ==6428== Memcheck, a memory error detector
    ==6428== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==6428== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==6428== Command: ./file
    ==6428== 
    ==6428== Invalid free() / delete / delete[] / realloc()
    ==6428==    at 0x484620F: free (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6428==    by 0x109215: main (c6.c:21)
    ==6428==  Address 0x4a6d090 is 0 bytes inside a block of size 40 free'd
    ==6428==    at 0x4848C63: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6428==    by 0x1091B4: resizeArray (c6.c:12)
    ==6428==    by 0x109202: main (c6.c:19)
    ==6428==  Block was alloc'd at
    ==6428==    at 0x4848A13: calloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6428==    by 0x1091EC: main (c6.c:18)
    ==6428== 
    ==6428== 
    ==6428== HEAP SUMMARY:
    ==6428==     in use at exit: 60 bytes in 1 blocks
    ==6428==   total heap usage: 3 allocs, 3 frees, 116 bytes allocated
    ==6428== 
    ==6428== LEAK SUMMARY:
    ==6428==    definitely lost: 60 bytes in 1 blocks
    ==6428==    indirectly lost: 0 bytes in 0 blocks
    ==6428==      possibly lost: 0 bytes in 0 blocks
    ==6428==    still reachable: 0 bytes in 0 blocks
    ==6428==         suppressed: 0 bytes in 0 blocks
    ==6428== Rerun with --leak-check=full to see details of leaked memory
    ==6428== 
    ==6428== For lists of detected and suppressed errors, rerun with: -s
    ==6428== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

    O valgrind acusa que 60 bits estão perdidos. O erro aparenta estar na linha 12 do código.

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==6488== Memcheck, a memory error detector
    ==6488== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==6488== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==6488== Command: ./file
    ==6488== 
    ==6488== Invalid free() / delete / delete[] / realloc()
    ==6488==    at 0x484620F: free (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6488==    by 0x109215: main (c6.c:21)
    ==6488==  Address 0x4a6d090 is 0 bytes inside a block of size 40 free'd
    ==6488==    at 0x4848C63: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6488==    by 0x1091B4: resizeArray (c6.c:12)
    ==6488==    by 0x109202: main (c6.c:19)
    ==6488==  Block was alloc'd at
    ==6488==    at 0x4848A13: calloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6488==    by 0x1091EC: main (c6.c:18)
    ==6488== 
    ==6488== 
    ==6488== HEAP SUMMARY:
    ==6488==     in use at exit: 60 bytes in 1 blocks
    ==6488==   total heap usage: 3 allocs, 3 frees, 116 bytes allocated
    ==6488== 
    ==6488== 60 bytes in 1 blocks are definitely lost in loss record 1 of 1
    ==6488==    at 0x4848C63: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6488==    by 0x1091B4: resizeArray (c6.c:12)
    ==6488==    by 0x109202: main (c6.c:19)
    ==6488== 
    ==6488== LEAK SUMMARY:
    ==6488==    definitely lost: 60 bytes in 1 blocks
    ==6488==    indirectly lost: 0 bytes in 0 blocks
    ==6488==      possibly lost: 0 bytes in 0 blocks
    ==6488==    still reachable: 0 bytes in 0 blocks
    ==6488==         suppressed: 0 bytes in 0 blocks
    ==6488== 
    ==6488== For lists of detected and suppressed errors, rerun with: -s
    ==6488== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

    Esse relatório também acusa erro em várias linhas do código. Especificamente na função resizeArray.
    Nesse sentido, apesar de o código compilar e executar corretamente, há um erro relativo a memória. 
    Quando se faz a realocação de memória com realloc, é atualizado o ponteiro dPtr, mas o campo data da estrutura List não é atualizado para apontar para a nova memória alocada. 
    Como resultado, pode-se enfrentar problemas de vazamento de memória e acesso inválido à memória.

3. Corrija o código, removendo o(s) erro(s) identificado(s).

    #include <stdlib.h>
    #include <stdint.h>

    struct _List {
        int32_t* data;
        int32_t length;
    };
    typedef struct _List List;

    List* resizeArray(List* array) {
        int32_t* dPtr = array->data;
        dPtr = realloc(dPtr, 15 * sizeof(int32_t)); // Realoca memória

        // Verifique se a realocação foi bem-sucedida
        if (dPtr == NULL) {
            // Tratamento de erro, se necessário
            // Você pode retornar NULL ou tomar outras medidas apropriadas
            // Por enquanto, vamos apenas retornar o array original
            return array;
        }

        // Atualize o ponteiro de dados da estrutura List
        array->data = dPtr;
        return array;
    }


    int main() {
        List* array = calloc(1, sizeof(List));
        array->data = calloc(10, sizeof(int32_t));
        array = resizeArray(array);

        free(array->data);
        free(array);
        return 0;
    }


4. Utilizando novamente as ferramentas, verifique a remoção do erro.

    Relatório do Valgrind:

    ==6854== Memcheck, a memory error detector
    ==6854== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==6854== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==6854== Command: ./file
    ==6854== 
    ==6854== 
    ==6854== HEAP SUMMARY:
    ==6854==     in use at exit: 0 bytes in 0 blocks
    ==6854==   total heap usage: 3 allocs, 3 frees, 116 bytes allocated
    ==6854== 
    ==6854== All heap blocks were freed -- no leaks are possible
    ==6854== 
    ==6854== For lists of detected and suppressed errors, rerun with: -s
    ==6854== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==6893== Memcheck, a memory error detector
    ==6893== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==6893== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==6893== Command: ./file
    ==6893== 
    ==6893== 
    ==6893== HEAP SUMMARY:
    ==6893==     in use at exit: 0 bytes in 0 blocks
    ==6893==   total heap usage: 3 allocs, 3 frees, 116 bytes allocated
    ==6893== 
    ==6893== All heap blocks were freed -- no leaks are possible
    ==6893== 
    ==6893== For lists of detected and suppressed errors, rerun with: -s
    ==6893== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Código compilado e executado sem erros.
