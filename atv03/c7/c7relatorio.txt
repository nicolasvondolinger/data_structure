1. Analise o código e tente identificar eventuais erros

    O código compila e executa corretamente. Porntanto, não há erros aparentes.

2. Utilizando as ferramentas, confirme a sua avaliação ou identifique problemas.

    Relatório do Valgrind:

    ==4130== Memcheck, a memory error detector
    ==4130== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==4130== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==4130== Command: ./file
    ==4130== 
    ==4130== Invalid write of size 1
    ==4130==    at 0x1091BC: main (c7.c:10)
    ==4130==  Address 0x4a6d05a is 0 bytes after a block of size 26 alloc'd
    ==4130==    at 0x4848A13: calloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==4130==    by 0x109183: main (c7.c:5)
    ==4130== 
    ==4130== 
    ==4130== HEAP SUMMARY:
    ==4130==     in use at exit: 0 bytes in 0 blocks
    ==4130==   total heap usage: 1 allocs, 1 frees, 26 bytes allocated
    ==4130== 
    ==4130== All heap blocks were freed -- no leaks are possible
    ==4130== 
    ==4130== For lists of detected and suppressed errors, rerun with: -s
    ==4130== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

    O valgrind acusa que há um erro de escrita de tamanho 1, na linha 10 do código.

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==4175== Memcheck, a memory error detector
    ==4175== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==4175== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==4175== Command: ./file
    ==4175== 
    ==4175== Invalid write of size 1
    ==4175==    at 0x1091BC: main (c7.c:10)
    ==4175==  Address 0x4a6d05a is 0 bytes after a block of size 26 alloc'd
    ==4175==    at 0x4848A13: calloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==4175==    by 0x109183: main (c7.c:5)
    ==4175== 
    ==4175== 
    ==4175== HEAP SUMMARY:
    ==4175==     in use at exit: 0 bytes in 0 blocks
    ==4175==   total heap usage: 1 allocs, 1 frees, 26 bytes allocated
    ==4175== 
    ==4175== All heap blocks were freed -- no leaks are possible
    ==4175== 
    ==4175== For lists of detected and suppressed errors, rerun with: -s
    ==4175== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

    Esse relatório também acusa o mesmo erro.
    O problema aqui é que há a tentativa de escrever um caractere nulo ('\0') na posição alphabet + 26, o que está fora dos limites alocados para o array alphabet. 

3. Corrija o código, removendo o(s) erro(s) identificado(s).

    #include <stdlib.h>
    #include <stdint.h>

    int main() {
        char* alphabet = calloc(26, sizeof(char));

        for (uint8_t i = 0; i < 26; i++) {
            *(alphabet + i) = 'A' + i;
        }
        *(alphabet + 25) = '\0'; // null-terminate the string

        free(alphabet);
        return 0;
    }

4. Utilizando novamente as ferramentas, verifique a remoção do erro.

    Relatório do Valgrind:

    ==4399== Memcheck, a memory error detector
    ==4399== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==4399== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==4399== Command: ./file
    ==4399== 
    ==4399== 
    ==4399== HEAP SUMMARY:
    ==4399==     in use at exit: 0 bytes in 0 blocks
    ==4399==   total heap usage: 1 allocs, 1 frees, 26 bytes allocated
    ==4399== 
    ==4399== All heap blocks were freed -- no leaks are possible
    ==4399== 
    ==4399== For lists of detected and suppressed errors, rerun with: -s
    ==4399== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==4400== Memcheck, a memory error detector
    ==4400== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==4400== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==4400== Command: ./file
    ==4400== 
    ==4400== 
    ==4400== HEAP SUMMARY:
    ==4400==     in use at exit: 0 bytes in 0 blocks
    ==4400==   total heap usage: 1 allocs, 1 frees, 26 bytes allocated
    ==4400== 
    ==4400== All heap blocks were freed -- no leaks are possible
    ==4400== 
    ==4400== For lists of detected and suppressed errors, rerun with: -s
    ==4400== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Código compilado e executado sem erros.
