1. Analise o código e tente identificar eventuais erros

    No primeiro momento de compilação e execução, não há erros aparentes no código.

2. Utilizando as ferramentas, confirme a sua avaliação ou identifique problemas.

    Relatório do Valgrind:

    ==4160== Memcheck, a memory error detector
    ==4160== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==4160== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==4160== Command: file
    ==4160== 
    Usage: file [-bcCdEhikLlNnprsSvzZ0] [--apple] [--extension] [--mime-encoding]
                [--mime-type] [-e <testname>] [-F <separator>]  [-f <namefile>]
                [-m <magicfiles>] [-P <parameter=value>] [--exclude-quiet]
                <file> ...
        file -C [-m <magicfiles>]
        file [--help]
    ==4160== 
    ==4160== HEAP SUMMARY:
    ==4160==     in use at exit: 177,032 bytes in 12 blocks
    ==4160==   total heap usage: 38 allocs, 26 frees, 185,886 bytes allocated
    ==4160== 
    ==4160== LEAK SUMMARY:
    ==4160==    definitely lost: 0 bytes in 0 blocks
    ==4160==    indirectly lost: 0 bytes in 0 blocks
    ==4160==      possibly lost: 0 bytes in 0 blocks
    ==4160==    still reachable: 177,032 bytes in 12 blocks
    ==4160==         suppressed: 0 bytes in 0 blocks
    ==4160== Rerun with --leak-check=full to see details of leaked memory
    ==4160== 
    ==4160== For lists of detected and suppressed errors, rerun with: -s
    ==4160== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Nesse sentido, a saída corresponde a analise feita no passo 1.

3. Corrija o código, removendo o(s) erro(s) identificado(s).

Não há erros no código

4. Utilizando novamente as ferramentas, verifique a remoção do erro.

    Código compilado e executado sem erros.
