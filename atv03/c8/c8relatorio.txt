1. Analise o código e tente identificar eventuais erros

    O código compila e executa corretamente. Porntanto, não há erros aparentes.

2. Utilizando as ferramentas, confirme a sua avaliação ou identifique problemas.

    Relatório do Valgrind:

    ==4678== Memcheck, a memory error detector
    ==4678== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==4678== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==4678== Command: ./file
    ==4678== 
    ==4678== Invalid read of size 1
    ==4678==    at 0x1091D2: main (c8.c:9)
    ==4678==  Address 0x4a6d0ba is 0 bytes after a block of size 26 alloc'd
    ==4678==    at 0x4843828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==4678==    by 0x1091B1: main (c8.c:6)
    ==4678== 
    ==4678== 
    ==4678== HEAP SUMMARY:
    ==4678==     in use at exit: 0 bytes in 0 blocks
    ==4678==   total heap usage: 2 allocs, 2 frees, 53 bytes allocated
    ==4678== 
    ==4678== All heap blocks were freed -- no leaks are possible
    ==4678== 
    ==4678== For lists of detected and suppressed errors, rerun with: -s
    ==4678== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

    O valgrind acusa que há um erro de leitura de tamanho 1, na linha 9 do código.

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==4716== Memcheck, a memory error detector
    ==4716== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==4716== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==4716== Command: ./file
    ==4716== 
    ==4716== Invalid read of size 1
    ==4716==    at 0x1091D2: main (c8.c:9)
    ==4716==  Address 0x4a6d0ba is 0 bytes after a block of size 26 alloc'd
    ==4716==    at 0x4843828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==4716==    by 0x1091B1: main (c8.c:6)
    ==4716== 
    ==4716== 
    ==4716== HEAP SUMMARY:
    ==4716==     in use at exit: 0 bytes in 0 blocks
    ==4716==   total heap usage: 2 allocs, 2 frees, 53 bytes allocated
    ==4716== 
    ==4716== All heap blocks were freed -- no leaks are possible
    ==4716== 
    ==4716== For lists of detected and suppressed errors, rerun with: -s
    ==4716== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

    Esse relatório também acusa o mesmo erro.

    Primeiro, está sendo alocada memória para o array de destino (destination) com um tamanho de 27 elementos, mas a memória para o array de origem (source) 
    está sendo alocada com um tamanho de apenas 26 elementos. Isso pode levar a um estouro de buffer. 
    Além disso, há a tentativa de copiar dados da origem para o destino sem inicializar o array de origem, o que pode levar a resultados indeterminados. 

3. Corrija o código, removendo o(s) erro(s) identificado(s).

    #include <stdlib.h>
    #include <stdint.h>

    int main() {
        char* destination = calloc(27, sizeof(char));
        char* source = malloc(27 * sizeof(char)); // Alocar a mesma quantidade de elementos.

        for (uint8_t i = 0; i < 26; i++) {
            *(destination + i) = *(source + i); // Copiar os dados da origem para o destino.
        }

        *(destination + 26) = '\0'; // Null-terminate the destination string.

        free(destination);
        free(source);
        return 0;
    }

4. Utilizando novamente as ferramentas, verifique a remoção do erro.

    Relatório do Valgrind:

    ==4972== Memcheck, a memory error detector
    ==4972== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==4972== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==4972== Command: ./file
    ==4972== 
    ==4972== 
    ==4972== HEAP SUMMARY:
    ==4972==     in use at exit: 0 bytes in 0 blocks
    ==4972==   total heap usage: 2 allocs, 2 frees, 54 bytes allocated
    ==4972== 
    ==4972== All heap blocks were freed -- no leaks are possible
    ==4972== 
    ==4972== For lists of detected and suppressed errors, rerun with: -s
    ==4972== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==4973== Memcheck, a memory error detector
    ==4973== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==4973== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==4973== Command: ./file
    ==4973== 
    ==4973== 
    ==4973== HEAP SUMMARY:
    ==4973==     in use at exit: 0 bytes in 0 blocks
    ==4973==   total heap usage: 2 allocs, 2 frees, 54 bytes allocated
    ==4973== 
    ==4973== All heap blocks were freed -- no leaks are possible
    ==4973== 
    ==4973== For lists of detected and suppressed errors, rerun with: -s
    ==4973== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Código compilado e executado sem erros.
