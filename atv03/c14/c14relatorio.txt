1. Analise o código e tente identificar eventuais erros

    O código compila e executa corretamente. Portanto, não há erros aparentes.

2. Utilizando as ferramentas, confirme a sua avaliação ou identifique problemas.

    Relatório do Valgrind:

    ==7928== Memcheck, a memory error detector
    ==7928== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==7928== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==7928== Command: ./file
    ==7928== 
    Positive integer:5
    ==7928== Conditional jump or move depends on uninitialised value(s)
    ==7928==    at 0x48C41F4: __printf_buffer (vfprintf-process-arg.c:58)
    ==7928==    by 0x48C5B30: __vfprintf_internal (vfprintf-internal.c:1459)
    ==7928==    by 0x48BAF9E: printf (printf.c:33)
    ==7928==    by 0x10920D: main (c14.c:12)
    ==7928== 
    ==7928== Use of uninitialised value of size 8
    ==7928==    at 0x48BA0EB: _itoa_word (_itoa.c:177)
    ==7928==    by 0x48C3F7A: __printf_buffer (vfprintf-process-arg.c:155)
    ==7928==    by 0x48C5B30: __vfprintf_internal (vfprintf-internal.c:1459)
    ==7928==    by 0x48BAF9E: printf (printf.c:33)
    ==7928==    by 0x10920D: main (c14.c:12)
    ==7928== 
    ==7928== Conditional jump or move depends on uninitialised value(s)
    ==7928==    at 0x48BA0FC: _itoa_word (_itoa.c:177)
    ==7928==    by 0x48C3F7A: __printf_buffer (vfprintf-process-arg.c:155)
    ==7928==    by 0x48C5B30: __vfprintf_internal (vfprintf-internal.c:1459)
    ==7928==    by 0x48BAF9E: printf (printf.c:33)
    ==7928==    by 0x10920D: main (c14.c:12)
    ==7928== 
    ==7928== Conditional jump or move depends on uninitialised value(s)
    ==7928==    at 0x48C3FCB: __printf_buffer (vfprintf-process-arg.c:186)
    ==7928==    by 0x48C5B30: __vfprintf_internal (vfprintf-internal.c:1459)
    ==7928==    by 0x48BAF9E: printf (printf.c:33)
    ==7928==    by 0x10920D: main (c14.c:12)
    ==7928== 
    Factorial 5 = 0
    ==7928== 
    ==7928== HEAP SUMMARY:
    ==7928==     in use at exit: 0 bytes in 0 blocks
    ==7928==   total heap usage: 2 allocs, 2 frees, 2,048 bytes allocated
    ==7928== 
    ==7928== All heap blocks were freed -- no leaks are possible
    ==7928== 
    ==7928== Use --track-origins=yes to see where uninitialised values come from
    ==7928== For lists of detected and suppressed errors, rerun with: -s
    ==7928== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)

    O valgrind acusa erros de não inicialização de valores.

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==7929== Memcheck, a memory error detector
    ==7929== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==7929== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==7929== Command: ./file
    ==7929== 
    Positive integer:5
    ==7929== Conditional jump or move depends on uninitialised value(s)
    ==7929==    at 0x48C41F4: __printf_buffer (vfprintf-process-arg.c:58)
    ==7929==    by 0x48C5B30: __vfprintf_internal (vfprintf-internal.c:1459)
    ==7929==    by 0x48BAF9E: printf (printf.c:33)
    ==7929==    by 0x10920D: main (c14.c:12)
    ==7929== 
    ==7929== Use of uninitialised value of size 8
    ==7929==    at 0x48BA0EB: _itoa_word (_itoa.c:177)
    ==7929==    by 0x48C3F7A: __printf_buffer (vfprintf-process-arg.c:155)
    ==7929==    by 0x48C5B30: __vfprintf_internal (vfprintf-internal.c:1459)
    ==7929==    by 0x48BAF9E: printf (printf.c:33)
    ==7929==    by 0x10920D: main (c14.c:12)
    ==7929== 
    ==7929== Conditional jump or move depends on uninitialised value(s)
    ==7929==    at 0x48BA0FC: _itoa_word (_itoa.c:177)
    ==7929==    by 0x48C3F7A: __printf_buffer (vfprintf-process-arg.c:155)
    ==7929==    by 0x48C5B30: __vfprintf_internal (vfprintf-internal.c:1459)
    ==7929==    by 0x48BAF9E: printf (printf.c:33)
    ==7929==    by 0x10920D: main (c14.c:12)
    ==7929== 
    ==7929== Conditional jump or move depends on uninitialised value(s)
    ==7929==    at 0x48C3FCB: __printf_buffer (vfprintf-process-arg.c:186)
    ==7929==    by 0x48C5B30: __vfprintf_internal (vfprintf-internal.c:1459)
    ==7929==    by 0x48BAF9E: printf (printf.c:33)
    ==7929==    by 0x10920D: main (c14.c:12)
    ==7929== 
    Factorial 5 = 0
    ==7929== 
    ==7929== HEAP SUMMARY:
    ==7929==     in use at exit: 0 bytes in 0 blocks
    ==7929==   total heap usage: 2 allocs, 2 frees, 2,048 bytes allocated
    ==7929== 
    ==7929== All heap blocks were freed -- no leaks are possible
    ==7929== 
    ==7929== Use --track-origins=yes to see where uninitialised values come from
    ==7929== For lists of detected and suppressed errors, rerun with: -s
    ==7929== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)

    Esse relatório acusa o mesmo tipo de erro.

    A variável fact não está sendo inicializada antes de ser usada no loop, o que pode levar a um resultado incorreto.

3. Corrija o código, removendo o(s) erro(s) identificado(s).

    #include <stdio.h>

    int main(void) {
    int n, i, fact = 1;

    printf("Positive integer:");
    scanf("%d", &n);
    
    for(i = 1; i<=n; i++) 
        fact = fact*i;

    printf("Factorial %d = %d\n", n, fact);
    }

4. Utilizando novamente as ferramentas, verifique a remoção do erro.

    Relatório do Valgrind:

    ==8096== Memcheck, a memory error detector
    ==8096== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==8096== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==8096== Command: ./file
    ==8096== 
    Positive integer:5
    Factorial 5 = 120
    ==8096== 
    ==8096== HEAP SUMMARY:
    ==8096==     in use at exit: 0 bytes in 0 blocks
    ==8096==   total heap usage: 2 allocs, 2 frees, 2,048 bytes allocated
    ==8096== 
    ==8096== All heap blocks were freed -- no leaks are possible
    ==8096== 
    ==8096== For lists of detected and suppressed errors, rerun with: -s
    ==8096== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==8097== Memcheck, a memory error detector
    ==8097== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==8097== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==8097== Command: ./file
    ==8097== 
    Positive integer:5
    Factorial 5 = 120
    ==8097== 
    ==8097== HEAP SUMMARY:
    ==8097==     in use at exit: 0 bytes in 0 blocks
    ==8097==   total heap usage: 2 allocs, 2 frees, 2,048 bytes allocated
    ==8097== 
    ==8097== All heap blocks were freed -- no leaks are possible
    ==8097== 
    ==8097== For lists of detected and suppressed errors, rerun with: -s
    ==8097== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Código compilado e executado sem erros.
