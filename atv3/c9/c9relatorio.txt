1. Analise o código e tente identificar eventuais erros

    O código compila e executa corretamente. Porntanto, não há erros aparentes.

2. Utilizando as ferramentas, confirme a sua avaliação ou identifique problemas.

    Relatório do Valgrind:

    ==5271== Memcheck, a memory error detector
    ==5271== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==5271== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==5271== Command: ./file
    ==5271== 
    ==5271== Invalid write of size 4
    ==5271==    at 0x10916B: f (c9.c:6)
    ==5271==    by 0x109180: main (c9.c:11)
    ==5271==  Address 0x4a6d068 is 0 bytes after a block of size 40 alloc'd
    ==5271==    at 0x4843828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==5271==    by 0x10915E: f (c9.c:5)
    ==5271==    by 0x109180: main (c9.c:11)
    ==5271== 
    ==5271== 
    ==5271== HEAP SUMMARY:
    ==5271==     in use at exit: 40 bytes in 1 blocks
    ==5271==   total heap usage: 1 allocs, 0 frees, 40 bytes allocated
    ==5271== 
    ==5271== LEAK SUMMARY:
    ==5271==    definitely lost: 40 bytes in 1 blocks
    ==5271==    indirectly lost: 0 bytes in 0 blocks
    ==5271==      possibly lost: 0 bytes in 0 blocks
    ==5271==    still reachable: 0 bytes in 0 blocks
    ==5271==         suppressed: 0 bytes in 0 blocks
    ==5271== Rerun with --leak-check=full to see details of leaked memory
    ==5271== 
    ==5271== For lists of detected and suppressed errors, rerun with: -s
    ==5271== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

    O valgrind acusa que há erros de escrita nas linhas 6 e 11, de tamanho 4.

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==5272== Memcheck, a memory error detector
    ==5272== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==5272== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==5272== Command: ./file
    ==5272== 
    ==5272== Invalid write of size 4
    ==5272==    at 0x10916B: f (c9.c:6)
    ==5272==    by 0x109180: main (c9.c:11)
    ==5272==  Address 0x4a6d068 is 0 bytes after a block of size 40 alloc'd
    ==5272==    at 0x4843828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==5272==    by 0x10915E: f (c9.c:5)
    ==5272==    by 0x109180: main (c9.c:11)
    ==5272== 
    ==5272== 
    ==5272== HEAP SUMMARY:
    ==5272==     in use at exit: 40 bytes in 1 blocks
    ==5272==   total heap usage: 1 allocs, 0 frees, 40 bytes allocated
    ==5272== 
    ==5272== 40 bytes in 1 blocks are definitely lost in loss record 1 of 1
    ==5272==    at 0x4843828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==5272==    by 0x10915E: f (c9.c:5)
    ==5272==    by 0x109180: main (c9.c:11)
    ==5272== 
    ==5272== LEAK SUMMARY:
    ==5272==    definitely lost: 40 bytes in 1 blocks
    ==5272==    indirectly lost: 0 bytes in 0 blocks
    ==5272==      possibly lost: 0 bytes in 0 blocks
    ==5272==    still reachable: 0 bytes in 0 blocks
    ==5272==         suppressed: 0 bytes in 0 blocks
    ==5272== 
    ==5272== For lists of detected and suppressed errors, rerun with: -s
    ==5272== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

    Esse relatório também acusa o mesmo erro.

    Foi alocada memória para um array de 10 inteiros, mas há a tentativa de acessar o elemento x[10], que está fora dos limites do array.

3. Corrija o código, removendo o(s) erro(s) identificado(s).

    #include <stdlib.h>

    void f(void) {
        int* x = malloc(10 * sizeof(int));
        x[9] = 0; // Acessando o último elemento válido do array.
        free(x);
    }

    int main(void) {
        f();
        return 0;
    }

4. Utilizando novamente as ferramentas, verifique a remoção do erro.

    Relatório do Valgrind:

    ==5432== Memcheck, a memory error detector
    ==5432== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==5432== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==5432== Command: ./file
    ==5432== 
    ==5432== 
    ==5432== HEAP SUMMARY:
    ==5432==     in use at exit: 0 bytes in 0 blocks
    ==5432==   total heap usage: 1 allocs, 1 frees, 40 bytes allocated
    ==5432== 
    ==5432== All heap blocks were freed -- no leaks are possible
    ==5432== 
    ==5432== For lists of detected and suppressed errors, rerun with: -s
    ==5432== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==5433== Memcheck, a memory error detector
    ==5433== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==5433== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==5433== Command: ./file
    ==5433== 
    ==5433== 
    ==5433== HEAP SUMMARY:
    ==5433==     in use at exit: 0 bytes in 0 blocks
    ==5433==   total heap usage: 1 allocs, 1 frees, 40 bytes allocated
    ==5433== 
    ==5433== All heap blocks were freed -- no leaks are possible
    ==5433== 
    ==5433== For lists of detected and suppressed errors, rerun with: -s
    ==5433== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Código compilado e executado sem erros.
