1. Analise o código e tente identificar eventuais erros

    O código compila e executa corretamente. Porntanto, não há erros aparentes.

2. Utilizando as ferramentas, confirme a sua avaliação ou identifique problemas.

    Relatório do Valgrind:

    ==5974== Memcheck, a memory error detector
    ==5974== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==5974== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==5974== Command: ./file
    ==5974== 
    intArray[450]: 450
    ==5974== 
    ==5974== HEAP SUMMARY:
    ==5974==     in use at exit: 4,000 bytes in 1 blocks
    ==5974==   total heap usage: 2 allocs, 1 frees, 5,024 bytes allocated
    ==5974== 
    ==5974== LEAK SUMMARY:
    ==5974==    definitely lost: 4,000 bytes in 1 blocks
    ==5974==    indirectly lost: 0 bytes in 0 blocks
    ==5974==      possibly lost: 0 bytes in 0 blocks
    ==5974==    still reachable: 0 bytes in 0 blocks
    ==5974==         suppressed: 0 bytes in 0 blocks
    ==5974== Rerun with --leak-check=full to see details of leaked memory
    ==5974== 
    ==5974== For lists of detected and suppressed errors, rerun with: -s
    ==5974== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==4939== Memcheck, a memory error detector
    ==4939== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==4939== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==4939== Command: ./file
    ==4939== 
    ==4939== Use of uninitialised value of size 8
    ==4939==    at 0x10917A: main (c4.c:13)
    ==4939== 
    ==4939== Invalid write of size 4
    ==4939==    at 0x10917A: main (c4.c:13)
    ==4939==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
    ==4939== 
    ==4939== 
    ==4939== Process terminating with default action of signal 11 (SIGSEGV)
    ==4939==  Access not within mapped region at address 0x0
    ==4939==    at 0x10917A: main (c4.c:13)
    ==4939==  If you believe this happened as a result of a stack
    ==4939==  overflow in your program's main thread (unlikely but
    ==4939==  possible), you can try to increase the size of the
    ==4939==  main thread stack using the --main-stacksize= flag.
    ==4939==  The main thread stack size used in this run was 8388608.
    ==4939== 
    ==4939== HEAP SUMMARY:
    ==4939==     in use at exit: 0 bytes in 0 blocks
    ==4939==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
    ==4939== 
    ==4939== All heap blocks were freed -- no leaks are possible
    ==4939== 
    ==4939== Use --track-origins=yes to see where uninitialised values come from
    ==4939== For lists of detected and suppressed errors, rerun with: -s
    ==4939== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

    Nesse sentido, apesar de o código compilar e executar corretamente, há um erro relativo a memória. 
    O código não libera a memória alocada para o vetor intArray.

3. Corrija o código, removendo o(s) erro(s) identificado(s).

    #include <stdlib.h>
    #include <stdio.h>
    #include <time.h>

    const int ARR_SIZE = 1000;

    int main() {
        // create an array of ARR_SIZE ints
        int *intArray = malloc(sizeof(int) * ARR_SIZE);

        // Check if memory allocation was successful
        if (intArray == NULL) {
            perror("Memory allocation failed");
            return 1; // Return an error code
        }

        // populate them
        for (int i = 0; i < ARR_SIZE; i++) {
            intArray[i] = i;
        }

        // print one out
        // first, seed the random number generator
        srand(time(NULL));
        int randNum = rand() % ARR_SIZE;

        printf("intArray[%d]: %d\n", randNum, intArray[randNum]);

        // Free the allocated memory
        free(intArray);

        return 0;
    }

4. Utilizando novamente as ferramentas, verifique a remoção do erro.

    Relatório do Valgrind:

    ==6100== Memcheck, a memory error detector
    ==6100== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==6100== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==6100== Command: ./file
    ==6100== 
    intArray[526]: 526
    ==6100== 
    ==6100== HEAP SUMMARY:
    ==6100==     in use at exit: 0 bytes in 0 blocks
    ==6100==   total heap usage: 2 allocs, 2 frees, 5,024 bytes allocated
    ==6100== 
    ==6100== All heap blocks were freed -- no leaks are possible
    ==6100== 
    ==6100== For lists of detected and suppressed errors, rerun with: -s
    ==6100== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==6101== Memcheck, a memory error detector
    ==6101== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==6101== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==6101== Command: ./file
    ==6101== 
    intArray[29]: 29
    ==6101== 
    ==6101== HEAP SUMMARY:
    ==6101==     in use at exit: 0 bytes in 0 blocks
    ==6101==   total heap usage: 2 allocs, 2 frees, 5,024 bytes allocated
    ==6101== 
    ==6101== All heap blocks were freed -- no leaks are possible
    ==6101== 
    ==6101== For lists of detected and suppressed errors, rerun with: -s
    ==6101== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Código compilado e executado sem erros.
