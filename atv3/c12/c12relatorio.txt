1. Analise o código e tente identificar eventuais erros

    O código compila e executa corretamente. Portanto, não há erros aparentes.

2. Utilizando as ferramentas, confirme a sua avaliação ou identifique problemas.

    Relatório do Valgrind:

    ==6958== Memcheck, a memory error detector
    ==6958== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==6958== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==6958== Command: ./file
    ==6958== 
    ==6958== Conditional jump or move depends on uninitialised value(s)
    ==6958==    at 0x109159: main (c12.c:6)
    ==6958== 
    X is zero==6958== 
    ==6958== HEAP SUMMARY:
    ==6958==     in use at exit: 0 bytes in 0 blocks
    ==6958==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
    ==6958== 
    ==6958== All heap blocks were freed -- no leaks are possible
    ==6958== 
    ==6958== Use --track-origins=yes to see where uninitialised values come from
    ==6958== For lists of detected and suppressed errors, rerun with: -s
    ==6958== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

    O valgrind acusa que há valores não inicializados.

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==6959== Memcheck, a memory error detector
    ==6959== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==6959== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==6959== Command: ./file
    ==6959== 
    ==6959== Conditional jump or move depends on uninitialised value(s)
    ==6959==    at 0x109159: main (c12.c:6)
    ==6959== 
    X is zero==6959== 
    ==6959== HEAP SUMMARY:
    ==6959==     in use at exit: 0 bytes in 0 blocks
    ==6959==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
    ==6959== 
    ==6959== All heap blocks were freed -- no leaks are possible
    ==6959== 
    ==6959== Use --track-origins=yes to see where uninitialised values come from
    ==6959== For lists of detected and suppressed errors, rerun with: -s
    ==6959== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

    Esse relatório também acusa o mesmo erro.

    A variável x é utilizada sem ser inicializáda, o que leva a um comportamento indefinido em C. 
    Quando se faz a comparação x == 0 dentro do if, a variável x não possui um valor definido, então o resultado é imprevisível.

3. Corrija o código, removendo o(s) erro(s) identificado(s).

    #include <stdio.h>

    int main()
    {
        int x = 0;
        if(x == 0) {
            printf("X is zero"); 
        }
        return 0;
    }

4. Utilizando novamente as ferramentas, verifique a remoção do erro.

    Relatório do Valgrind:

    ==7118== Memcheck, a memory error detector
    ==7118== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==7118== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==7118== Command: ./file
    ==7118== 
    X is zero==7118== 
    ==7118== HEAP SUMMARY:
    ==7118==     in use at exit: 0 bytes in 0 blocks
    ==7118==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
    ==7118== 
    ==7118== All heap blocks were freed -- no leaks are possible
    ==7118== 
    ==7118== For lists of detected and suppressed errors, rerun with: -s
    ==7118== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==7119== Memcheck, a memory error detector
    ==7119== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==7119== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==7119== Command: ./file
    ==7119== 
    X is zero==7119== 
    ==7119== HEAP SUMMARY:
    ==7119==     in use at exit: 0 bytes in 0 blocks
    ==7119==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
    ==7119== 
    ==7119== All heap blocks were freed -- no leaks are possible
    ==7119== 
    ==7119== For lists of detected and suppressed errors, rerun with: -s
    ==7119== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Código compilado e executado sem erros.
