1. Analise o código e tente identificar eventuais erros

    O código compila, mas não executa corretamente. Erro dado no terminal após a entrada do valor:

    nicolasvondolinger@nicolasvondolinger-82MF:~/Codes/data_structure/atv3/c19$ ./file
    enter a number:
    5
    Segmentation fault (core dumped)

2. Utilizando as ferramentas, confirme a sua avaliação ou identifique problemas.

    Relatório do Valgrind:

    ==9485== Memcheck, a memory error detector
    ==9485== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==9485== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==9485== Command: ./file
    ==9485== 
    enter a number:
    5
    ==9485== Invalid write of size 2
    ==9485==    at 0x484DAC3: memmove (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==9485==    by 0x48BBB67: __printf_buffer_write (Xprintf_buffer_write.c:39)
    ==9485==    by 0x48C3916: __printf_buffer (vfprintf-internal.c:647)
    ==9485==    by 0x48E0830: __vsprintf_internal (iovsprintf.c:62)
    ==9485==    by 0x48C0EA4: sprintf (sprintf.c:30)
    ==9485==    by 0x1092A5: printSum (c19.c:22)
    ==9485==    by 0x1092DD: main (c19.c:28)
    ==9485==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
    ==9485== 
    ==9485== 
    ==9485== Process terminating with default action of signal 11 (SIGSEGV)
    ==9485==  Access not within mapped region at address 0x0
    ==9485==    at 0x484DAC3: memmove (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==9485==    by 0x48BBB67: __printf_buffer_write (Xprintf_buffer_write.c:39)
    ==9485==    by 0x48C3916: __printf_buffer (vfprintf-internal.c:647)
    ==9485==    by 0x48E0830: __vsprintf_internal (iovsprintf.c:62)
    ==9485==    by 0x48C0EA4: sprintf (sprintf.c:30)
    ==9485==    by 0x1092A5: printSum (c19.c:22)
    ==9485==    by 0x1092DD: main (c19.c:28)
    ==9485==  If you believe this happened as a result of a stack
    ==9485==  overflow in your program's main thread (unlikely but
    ==9485==  possible), you can try to increase the size of the
    ==9485==  main thread stack using the --main-stacksize= flag.
    ==9485==  The main thread stack size used in this run was 8388608.
    ==9485== 
    ==9485== HEAP SUMMARY:
    ==9485==     in use at exit: 2,048 bytes in 2 blocks
    ==9485==   total heap usage: 2 allocs, 0 frees, 2,048 bytes allocated
    ==9485== 
    ==9485== LEAK SUMMARY:
    ==9485==    definitely lost: 0 bytes in 0 blocks
    ==9485==    indirectly lost: 0 bytes in 0 blocks
    ==9485==      possibly lost: 0 bytes in 0 blocks
    ==9485==    still reachable: 2,048 bytes in 2 blocks
    ==9485==         suppressed: 0 bytes in 0 blocks
    ==9485== Rerun with --leak-check=full to see details of leaked memory
    ==9485== 
    ==9485== For lists of detected and suppressed errors, rerun with: -s
    ==9485== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)
    Segmentation fault (core dumped)

    O valgrind acusa erro de memória não alocada e não liberada.

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==9521== Memcheck, a memory error detector
    ==9521== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==9521== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==9521== Command: ./file
    ==9521== 
    enter a number:
    5
    ==9521== Invalid write of size 2
    ==9521==    at 0x484DAC3: memmove (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==9521==    by 0x48BBB67: __printf_buffer_write (Xprintf_buffer_write.c:39)
    ==9521==    by 0x48C3916: __printf_buffer (vfprintf-internal.c:647)
    ==9521==    by 0x48E0830: __vsprintf_internal (iovsprintf.c:62)
    ==9521==    by 0x48C0EA4: sprintf (sprintf.c:30)
    ==9521==    by 0x1092A5: printSum (c19.c:22)
    ==9521==    by 0x1092DD: main (c19.c:28)
    ==9521==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
    ==9521== 
    ==9521== 
    ==9521== Process terminating with default action of signal 11 (SIGSEGV)
    ==9521==  Access not within mapped region at address 0x0
    ==9521==    at 0x484DAC3: memmove (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==9521==    by 0x48BBB67: __printf_buffer_write (Xprintf_buffer_write.c:39)
    ==9521==    by 0x48C3916: __printf_buffer (vfprintf-internal.c:647)
    ==9521==    by 0x48E0830: __vsprintf_internal (iovsprintf.c:62)
    ==9521==    by 0x48C0EA4: sprintf (sprintf.c:30)
    ==9521==    by 0x1092A5: printSum (c19.c:22)
    ==9521==    by 0x1092DD: main (c19.c:28)
    ==9521==  If you believe this happened as a result of a stack
    ==9521==  overflow in your program's main thread (unlikely but
    ==9521==  possible), you can try to increase the size of the
    ==9521==  main thread stack using the --main-stacksize= flag.
    ==9521==  The main thread stack size used in this run was 8388608.
    ==9521== 
    ==9521== HEAP SUMMARY:
    ==9521==     in use at exit: 2,048 bytes in 2 blocks
    ==9521==   total heap usage: 2 allocs, 0 frees, 2,048 bytes allocated
    ==9521== 
    ==9521== LEAK SUMMARY:
    ==9521==    definitely lost: 0 bytes in 0 blocks
    ==9521==    indirectly lost: 0 bytes in 0 blocks
    ==9521==      possibly lost: 0 bytes in 0 blocks
    ==9521==    still reachable: 2,048 bytes in 2 blocks
    ==9521==         suppressed: 0 bytes in 0 blocks
    ==9521== Reachable blocks (those to which a pointer was found) are not shown.
    ==9521== To see them, rerun with: --leak-check=full --show-leak-kinds=all
    ==9521== 
    ==9521== For lists of detected and suppressed errors, rerun with: -s
    ==9521== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)
    Segmentation fault (core dumped)

    Esse relatório apresenta os mesmos erros.

    Há um problema no uso da variável buf. 
    Ela foi declarada como um ponteiro de caractere, mas não foi alocada memória para ela, o que pode levar a um comportamento indefinido.

3. Corrija o código, removendo o(s) erro(s) identificado(s).

    #include <stdio.h>
    #include <string.h>
    #include <stdlib.h>

    char *buf;

    int sum_to_n(int num)
    {
        int i, sum = 0;
        for (i = 1; i <= num; i++)
            sum += i;
        return sum;
    }

    void printSum()
    {
        char line[10];
        printf("enter a number:\n");
        fgets(line, 10, stdin);
        if (line != NULL)
            strtok(line, "\n");
        buf = (char *)malloc(20); // Aloque memória para buf
        sprintf(buf, "sum=%d", sum_to_n(atoi(line)));
        printf("%s\n", buf);
        free(buf); // Libere a memória alocada para buf
    }

    int main(void)
    {
        printSum();
        return 0;
    }

4. Utilizando novamente as ferramentas, verifique a remoção do erro.

    Relatório do Valgrind:

    ==9710== Memcheck, a memory error detector
    ==9710== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==9710== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==9710== Command: ./file
    ==9710== 
    enter a number:
    5
    sum=15
    ==9710== 
    ==9710== HEAP SUMMARY:
    ==9710==     in use at exit: 0 bytes in 0 blocks
    ==9710==   total heap usage: 3 allocs, 3 frees, 2,068 bytes allocated
    ==9710== 
    ==9710== All heap blocks were freed -- no leaks are possible
    ==9710== 
    ==9710== For lists of detected and suppressed errors, rerun with: -s
    ==9710== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==9711== Memcheck, a memory error detector
    ==9711== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==9711== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==9711== Command: ./file
    ==9711== 
    enter a number:
    5
    sum=15
    ==9711== 
    ==9711== HEAP SUMMARY:
    ==9711==     in use at exit: 0 bytes in 0 blocks
    ==9711==   total heap usage: 3 allocs, 3 frees, 2,068 bytes allocated
    ==9711== 
    ==9711== All heap blocks were freed -- no leaks are possible
    ==9711== 
    ==9711== For lists of detected and suppressed errors, rerun with: -s
    ==9711== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Código compilado e executado sem erros.
