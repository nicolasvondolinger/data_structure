1. Analise o código e tente identificar eventuais erros

    O código compila corretamente, apesar de aparecerem avisos e notas no terminal:

    c11.c: In function ‘main’:
    c11.c:9:9: warning: ‘__builtin_memcpy’ writing 10 bytes into a region of size 8 overflows the destination [-Wstringop-overflow=]
        9 |         strcpy(msg, "Holberton");
        |         ^~~~~~~~~~~~~~~~~~~~~~~~
    c11.c:8:21: note: destination object of size 8 allocated by ‘malloc’
        8 |         char *msg = malloc(8);
        |                     ^~~~~~~~~

    O código também executa corretamente.

2. Utilizando as ferramentas, confirme a sua avaliação ou identifique problemas.

    Relatório do Valgrind:

    ==6333== Memcheck, a memory error detector
    ==6333== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==6333== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==6333== Command: ./file
    ==6333== 
    ==6333== Invalid write of size 2
    ==6333==    at 0x1091B4: main (c11.c:9)
    ==6333==  Address 0x4a6d048 is 0 bytes after a block of size 8 alloc'd
    ==6333==    at 0x4843828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6333==    by 0x10919E: main (c11.c:8)
    ==6333== 
    ==6333== Invalid read of size 1
    ==6333==    at 0x4849CB4: strlen (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6333==    by 0x48C5317: __printf_buffer (vfprintf-process-arg.c:435)
    ==6333==    by 0x48C5B30: __vfprintf_internal (vfprintf-internal.c:1459)
    ==6333==    by 0x48BAF9E: printf (printf.c:33)
    ==6333==    by 0x1091E2: main (c11.c:11)
    ==6333==  Address 0x4a6d048 is 0 bytes after a block of size 8 alloc'd
    ==6333==    at 0x4843828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6333==    by 0x10919E: main (c11.c:8)
    ==6333== 
    ==6333== Invalid read of size 1
    ==6333==    at 0x484DAF0: memmove (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6333==    by 0x48BBB67: __printf_buffer_write (Xprintf_buffer_write.c:39)
    ==6333==    by 0x48C3CD4: __printf_buffer (vfprintf-process-arg.c:501)
    ==6333==    by 0x48C5B30: __vfprintf_internal (vfprintf-internal.c:1459)
    ==6333==    by 0x48BAF9E: printf (printf.c:33)
    ==6333==    by 0x1091E2: main (c11.c:11)
    ==6333==  Address 0x4a6d048 is 0 bytes after a block of size 8 alloc'd
    ==6333==    at 0x4843828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6333==    by 0x10919E: main (c11.c:8)
    ==6333== 
    6333, Rolberton
    ==6333== 
    ==6333== HEAP SUMMARY:
    ==6333==     in use at exit: 8 bytes in 1 blocks
    ==6333==   total heap usage: 2 allocs, 1 frees, 1,032 bytes allocated
    ==6333== 
    ==6333== LEAK SUMMARY:
    ==6333==    definitely lost: 8 bytes in 1 blocks
    ==6333==    indirectly lost: 0 bytes in 0 blocks
    ==6333==      possibly lost: 0 bytes in 0 blocks
    ==6333==    still reachable: 0 bytes in 0 blocks
    ==6333==         suppressed: 0 bytes in 0 blocks
    ==6333== Rerun with --leak-check=full to see details of leaked memory
    ==6333== 
    ==6333== For lists of detected and suppressed errors, rerun with: -s
    ==6333== ERROR SUMMARY: 5 errors from 3 contexts (suppressed: 0 from 0)

    O valgrind acusa que há leitura e de vazamento de memória.

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==6334== Memcheck, a memory error detector
    ==6334== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==6334== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==6334== Command: ./file
    ==6334== 
    ==6334== Invalid write of size 2
    ==6334==    at 0x1091B4: main (c11.c:9)
    ==6334==  Address 0x4a6d048 is 0 bytes after a block of size 8 alloc'd
    ==6334==    at 0x4843828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6334==    by 0x10919E: main (c11.c:8)
    ==6334== 
    ==6334== Invalid read of size 1
    ==6334==    at 0x4849CB4: strlen (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6334==    by 0x48C5317: __printf_buffer (vfprintf-process-arg.c:435)
    ==6334==    by 0x48C5B30: __vfprintf_internal (vfprintf-internal.c:1459)
    ==6334==    by 0x48BAF9E: printf (printf.c:33)
    ==6334==    by 0x1091E2: main (c11.c:11)
    ==6334==  Address 0x4a6d048 is 0 bytes after a block of size 8 alloc'd
    ==6334==    at 0x4843828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6334==    by 0x10919E: main (c11.c:8)
    ==6334== 
    ==6334== Invalid read of size 1
    ==6334==    at 0x484DAF0: memmove (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6334==    by 0x48BBB67: __printf_buffer_write (Xprintf_buffer_write.c:39)
    ==6334==    by 0x48C3CD4: __printf_buffer (vfprintf-process-arg.c:501)
    ==6334==    by 0x48C5B30: __vfprintf_internal (vfprintf-internal.c:1459)
    ==6334==    by 0x48BAF9E: printf (printf.c:33)
    ==6334==    by 0x1091E2: main (c11.c:11)
    ==6334==  Address 0x4a6d048 is 0 bytes after a block of size 8 alloc'd
    ==6334==    at 0x4843828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6334==    by 0x10919E: main (c11.c:8)
    ==6334== 
    6334, Rolberton
    ==6334== 
    ==6334== HEAP SUMMARY:
    ==6334==     in use at exit: 8 bytes in 1 blocks
    ==6334==   total heap usage: 2 allocs, 1 frees, 1,032 bytes allocated
    ==6334== 
    ==6334== 8 bytes in 1 blocks are definitely lost in loss record 1 of 1
    ==6334==    at 0x4843828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==6334==    by 0x10919E: main (c11.c:8)
    ==6334== 
    ==6334== LEAK SUMMARY:
    ==6334==    definitely lost: 8 bytes in 1 blocks
    ==6334==    indirectly lost: 0 bytes in 0 blocks
    ==6334==      possibly lost: 0 bytes in 0 blocks
    ==6334==    still reachable: 0 bytes in 0 blocks
    ==6334==         suppressed: 0 bytes in 0 blocks
    ==6334== 
    ==6334== For lists of detected and suppressed errors, rerun with: -s
    ==6334== ERROR SUMMARY: 6 errors from 4 contexts (suppressed: 0 from 0)

    Esse relatório também acusa o mesmo erro.

    O código aloca memória dinamicamente para a string msg e tenta copiar a string "Holberton" para ela. 
    No entanto, há um problema no tamanho alocado para msg. Foram alocados apenas 8 bytes, mas a string "Holberton" tem 9 caracteres (contando o caractere nulo \0 no final). 
    Portanto, deve-se alocar pelo menos 9 bytes para armazenar essa string.

3. Corrija o código, removendo o(s) erro(s) identificado(s).

    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <unistd.h>

    int main(void) {
        char *msg = malloc(10); 

        strcpy(msg, "Holberton");
        msg[0] = 'R';
        printf("%ld, %s\n", (long)getpid(), msg);

        free(msg); // Libere a memória alocada
        return 0;
    }

4. Utilizando novamente as ferramentas, verifique a remoção do erro.

    Relatório do Valgrind:

    ==6694== Memcheck, a memory error detector
    ==6694== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==6694== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==6694== Command: ./file
    ==6694== 
    6694, Rolberton
    ==6694== 
    ==6694== HEAP SUMMARY:
    ==6694==     in use at exit: 0 bytes in 0 blocks
    ==6694==   total heap usage: 2 allocs, 2 frees, 1,034 bytes allocated
    ==6694== 
    ==6694== All heap blocks were freed -- no leaks are possible
    ==6694== 
    ==6694== For lists of detected and suppressed errors, rerun with: -s
    ==6694== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Relatório do Valgrind com a adição do comando "--leak-check=full":

    ==6702== Memcheck, a memory error detector
    ==6702== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
    ==6702== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
    ==6702== Command: ./file
    ==6702== 
    6702, Rolberton
    ==6702== 
    ==6702== HEAP SUMMARY:
    ==6702==     in use at exit: 0 bytes in 0 blocks
    ==6702==   total heap usage: 2 allocs, 2 frees, 1,034 bytes allocated
    ==6702== 
    ==6702== All heap blocks were freed -- no leaks are possible
    ==6702== 
    ==6702== For lists of detected and suppressed errors, rerun with: -s
    ==6702== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

    Código compilado e executado sem erros.
